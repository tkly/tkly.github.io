<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++ STL 之 map</title>
    <url>/2019/12/29/map/</url>
    <content><![CDATA[<h1 id="C-STL之map"><a href="#C-STL之map" class="headerlink" title="C++  STL之map"></a>C++  STL之map</h1><hr>
<blockquote>
<p>map一定使用底层RB-tree的insert_unique()而非insert_equal()<br>multimap才使用insert_equal()<br>因为map不容许相同键值存在，multimap才允许相同键值存在<br>头文件　<code>#include &lt;map&gt;</code></p>
</blockquote>
<h4 id="二、插入数据"><a href="#二、插入数据" class="headerlink" title="二、插入数据"></a><strong>二、插入数据</strong></h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mapInt;</span></pre></td></tr></table></figure>
<p><strong>1、insert插入pair&lt;&gt;数据</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">mapInt.insert(pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(<span class="number">1</span>,<span class="number">13</span>));</span></pre></td></tr></table></figure>
<p><strong>2、insert插入map&lt;&gt;::value_type数据</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">mapInt.insert(<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::value_type(<span class="number">2</span>,<span class="number">9</span>));</span></pre></td></tr></table></figure>
<p><strong>3、insert插入make_pair数据</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">mapInt.insert(make_pair(<span class="number">3</span>, <span class="number">99</span>);</span></pre></td></tr></table></figure>
<p><strong>4、下标方式插入</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">mapInt[<span class="number">4</span>] = <span class="number">23</span>;</span></pre></td></tr></table></figure>


<h4 id="三、遍历"><a href="#三、遍历" class="headerlink" title="三、遍历"></a><strong>三、遍历</strong></h4><p><strong>1、迭代器for循环</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::iterator it =mapInt.begin(); it != mapInt.end(); ++it)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"["</span> &lt;&lt; it.first &lt;&lt; <span class="string">"]="</span> &lt;&lt; it.second &lt;&lt; <span class="built_in">endl</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p><strong>2、for_each()循环</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义函数指针</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::value_type <span class="keyword">const</span> &amp;value)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"["</span> &lt;&lt; value.first &lt;&lt; <span class="string">"]="</span> &lt;&lt; value.second &lt;&lt; <span class="built_in">endl</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 执行for_each()</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">for_each(mapInt.begin(), mapInt.end(), display);</span></pre></td></tr></table></figure>
<p><strong>3、auto迭代器写法(C++11)</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it = mapInt.begin(); it != mapInt.end(); ++it)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"["</span> &lt;&lt; it.first &lt;&lt; <span class="string">"]="</span> &lt;&lt; i</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p><strong>4、for-loop-scope迭代器写法(C++11)</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> p : mapInt)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"["</span> &lt;&lt; p.first &lt;&lt; <span class="string">"]="</span> &lt;&lt; p.second &lt;&lt; <span class="built_in">endl</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p><strong>5、for_each()与lamdba表达式(C++11)</strong></p>
<p><strong>【注意】</strong><br>使用for_each()需要包含头文件<code>#include &lt;algorithm&gt;</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">for_each(mapInt.begin(); mapInt.end();<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::value_type &amp;p)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"["</span> &lt;&lt; p.first &lt;&lt; <span class="string">"]="</span> &lt;&lt; p.second &lt;&lt; <span class="built_in">endl</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>








]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>STL</tag>
        <tag>map</tag>
      </tags>
  </entry>
  <entry>
    <title>VIM提高开发效率</title>
    <url>/2019/12/21/VIM%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87/</url>
    <content><![CDATA[<p><strong>1、VIM连续多行缩进</strong><br>normal模式下<br>1)、选中行<br><code>shfit+v</code>启动选中状态，通过方向键控制选中行数<br>2)、缩进<br>使用<code>==</code>进行缩进，经测试，应该一次缩进n个Tab<br>使用<code>&gt;</code>向右缩进一个Tab<br>使用<code>&lt;</code>向左缩进一个Tab</p>
]]></content>
      <tags>
        <tag>VIM</tag>
      </tags>
  </entry>
  <entry>
    <title>jsoncpp新老接口对比</title>
    <url>/2019/12/20/jsoncpp%E6%96%B0%E8%80%81%E6%8E%A5%E5%8F%A3%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>json</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>Git避坑指南</title>
    <url>/2019/12/19/Git%E9%81%BF%E5%9D%91%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h4 id="1、断点续传"><a href="#1、断点续传" class="headerlink" title="1、断点续传"></a>1、断点续传</h4><p>直接使用git clone ***  是无法实现断点续传的，大点的文件很容易出现fatal: early EOF，如何实现断电续传呢？<br>下面以cJSON为例，作以说明：</p>
<p>【方案1】</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir cJSON</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> cJSON</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git init</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git fetch https://github.com/DaveGamble/cJSON.git</span></pre></td></tr><tr><td class="code"><pre><span class="line">remote: Enumerating objects: 40, <span class="keyword">done</span>.</span></pre></td></tr><tr><td class="code"><pre><span class="line">remote: Counting objects: 100% (40/40), <span class="keyword">done</span>.</span></pre></td></tr><tr><td class="code"><pre><span class="line">remote: Compressing objects: 100% (34/34), <span class="keyword">done</span>.</span></pre></td></tr><tr><td class="code"><pre><span class="line">remote: Total 3744 (delta 16), reused 17 (delta 6), pack-reused 3704</span></pre></td></tr><tr><td class="code"><pre><span class="line">Receiving objects: 100% (3744/3744), 2.28 MiB | 11.00 KiB/s, <span class="keyword">done</span>.</span></pre></td></tr><tr><td class="code"><pre><span class="line">Resolving deltas: 100% (2419/2419), <span class="keyword">done</span>.</span></pre></td></tr><tr><td class="code"><pre><span class="line">From https://github.com/DaveGamble/cJSON</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * branch            HEAD       -&gt; FETCH_HEAD</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git checkout FETCH_HEAD</span></pre></td></tr></table></figure>
<p>git fetch默认会将最新的数据fetch到了本地的FETCH_HEAD分支上去<br>fetch完成后会看到 <code>* branch            HEAD       -&gt; FETCH_HEAD</code>这条语句<br>如果fetch中断，可继续执行fetch命令直到fetch完成，期间数据是断点续传的<br>git fetch跟git clone不同的是:<br>git clone获取的仓库，可以使用git remote -v命令查看远程仓库信息，可以执行git pull<br>git fetch获取的仓库，没有远程仓库信息，无法执行git pull</p>
<p>【方案二】</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir cJSON</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> cJSON</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git init</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git fetch https://github.com/DaveGamble/cJSON.git HEAD:HEAD</span></pre></td></tr><tr><td class="code"><pre><span class="line">remote: Enumerating objects: 40, <span class="keyword">done</span>.</span></pre></td></tr><tr><td class="code"><pre><span class="line">remote: Counting objects: 100% (40/40), <span class="keyword">done</span>.</span></pre></td></tr><tr><td class="code"><pre><span class="line">remote: Compressing objects: 100% (34/34), <span class="keyword">done</span>.</span></pre></td></tr><tr><td class="code"><pre><span class="line">remote: Total 3744 (delta 16), reused 17 (delta 6), pack-reused 3704</span></pre></td></tr><tr><td class="code"><pre><span class="line">Receiving objects: 100% (3744/3744), 2.28 MiB | 10.00 KiB/s, <span class="keyword">done</span>.</span></pre></td></tr><tr><td class="code"><pre><span class="line">Resolving deltas: 100% (2419/2419), <span class="keyword">done</span>.</span></pre></td></tr><tr><td class="code"><pre><span class="line">From https://github.com/DaveGamble/cJSON</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new ref]                    -&gt; HEAD</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v0.0.0     -&gt; v0.0.0</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.0.0     -&gt; v1.0.0</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.0.1     -&gt; v1.0.1</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.0.2     -&gt; v1.0.2</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.1.0     -&gt; v1.1.0</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.2.0     -&gt; v1.2.0</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.2.1     -&gt; v1.2.1</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.3.0     -&gt; v1.3.0</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.3.1     -&gt; v1.3.1</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.3.2     -&gt; v1.3.2</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.4.0     -&gt; v1.4.0</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.4.1     -&gt; v1.4.1</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.4.2     -&gt; v1.4.2</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.4.3     -&gt; v1.4.3</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.4.4     -&gt; v1.4.4</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.4.5     -&gt; v1.4.5</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.4.6     -&gt; v1.4.6</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.4.7     -&gt; v1.4.7</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.5.0     -&gt; v1.5.0</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.5.1     -&gt; v1.5.1</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.5.2     -&gt; v1.5.2</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.5.3     -&gt; v1.5.3</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.5.4     -&gt; v1.5.4</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.5.5     -&gt; v1.5.5</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.5.6     -&gt; v1.5.6</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.5.7     -&gt; v1.5.7</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.5.8     -&gt; v1.5.8</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.5.9     -&gt; v1.5.9</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.6.0     -&gt; v1.6.0</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.7.0     -&gt; v1.7.0</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.7.1     -&gt; v1.7.1</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.7.10    -&gt; v1.7.10</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.7.11    -&gt; v1.7.11</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.7.12    -&gt; v1.7.12</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.7.2     -&gt; v1.7.2</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.7.3     -&gt; v1.7.3</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.7.4     -&gt; v1.7.4</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.7.5     -&gt; v1.7.5</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.7.6     -&gt; v1.7.6</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.7.7     -&gt; v1.7.7</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.7.8     -&gt; v1.7.8</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * [new tag]         v1.7.9     -&gt; v1.7.9</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git checkout HEAD</span></pre></td></tr></table></figure>
<p>将远程仓库的HEAD fetch到本地仓库的HEAD</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>12道经典计算机网络面试题</title>
    <url>/2019/12/13/12%E9%81%93%E7%BB%8F%E5%85%B8%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h4 id="1、请详细介绍一下TCP的三次握手机制，为什么要三次握手？"><a href="#1、请详细介绍一下TCP的三次握手机制，为什么要三次握手？" class="headerlink" title="1、请详细介绍一下TCP的三次握手机制，为什么要三次握手？"></a>1、请详细介绍一下TCP的三次握手机制，为什么要三次握手？</h4><h4 id="2、讲一讲SYN超时，泛洪攻击，以及解决策略"><a href="#2、讲一讲SYN超时，泛洪攻击，以及解决策略" class="headerlink" title="2、讲一讲SYN超时，泛洪攻击，以及解决策略"></a>2、讲一讲SYN超时，泛洪攻击，以及解决策略</h4><h4 id="3、详细介绍一下TCP的四次挥手机制，为什么要有TIME-WAIT状态，为什么需要四次挥手？服务器出现了大量CLOSE-WAIT状态如何解决？"><a href="#3、详细介绍一下TCP的四次挥手机制，为什么要有TIME-WAIT状态，为什么需要四次挥手？服务器出现了大量CLOSE-WAIT状态如何解决？" class="headerlink" title="3、详细介绍一下TCP的四次挥手机制，为什么要有TIME_WAIT状态，为什么需要四次挥手？服务器出现了大量CLOSE_WAIT状态如何解决？"></a>3、详细介绍一下TCP的四次挥手机制，为什么要有TIME_WAIT状态，为什么需要四次挥手？服务器出现了大量CLOSE_WAIT状态如何解决？</h4><h4 id="4、详细讲一下TCP的滑动窗口"><a href="#4、详细讲一下TCP的滑动窗口" class="headerlink" title="4、详细讲一下TCP的滑动窗口"></a>4、详细讲一下TCP的滑动窗口</h4><h4 id="5、讲一下HTTP与HTTPS的区别"><a href="#5、讲一下HTTP与HTTPS的区别" class="headerlink" title="5、讲一下HTTP与HTTPS的区别"></a>5、讲一下HTTP与HTTPS的区别</h4><h4 id="6、讲一讲TCP和UDP各有什么特点，两者有什么区别"><a href="#6、讲一讲TCP和UDP各有什么特点，两者有什么区别" class="headerlink" title="6、讲一讲TCP和UDP各有什么特点，两者有什么区别"></a>6、讲一讲TCP和UDP各有什么特点，两者有什么区别</h4><h4 id="7、在地址栏键入URL后，网络世界发生了什么？"><a href="#7、在地址栏键入URL后，网络世界发生了什么？" class="headerlink" title="7、在地址栏键入URL后，网络世界发生了什么？"></a>7、在地址栏键入URL后，网络世界发生了什么？</h4><h4 id="8、HTTP的常见状态码有哪些，代表什么含义？"><a href="#8、HTTP的常见状态码有哪些，代表什么含义？" class="headerlink" title="8、HTTP的常见状态码有哪些，代表什么含义？"></a>8、HTTP的常见状态码有哪些，代表什么含义？</h4><h4 id="9、GET请求和POST请求的区别"><a href="#9、GET请求和POST请求的区别" class="headerlink" title="9、GET请求和POST请求的区别"></a>9、GET请求和POST请求的区别</h4><h4 id="10、什么是Cookie-Cookie的使用过程是怎么样的？"><a href="#10、什么是Cookie-Cookie的使用过程是怎么样的？" class="headerlink" title="10、什么是Cookie, Cookie的使用过程是怎么样的？"></a>10、什么是Cookie, Cookie的使用过程是怎么样的？</h4><p>由于Http协议是无状态协议，如果客户通过浏览器访问web应用时没有一个保存用户访问状态的机制，那么将不能持续跟踪应用的操作。比如当用户往购物车中添加了商品，web应用必须在用户浏览别的商品的时候仍保存购物车的状态，以便用户继续往购物车中添加商品。</p>
<p>cookie是浏览器的一种缓存机制，它可用于维持客户端与服务器端之间的会话。由于下面一题会讲到session，所以这里要强调cookie会将会话保存在客户端(session则是把会话保存在服务器端）</p>
<p>这里以最常见的登录案例讲解cookie的使用过程：<br>1、首先用户在客户端浏览器向服务器发起登录请求<br>2、登录成功后，服务器会把登录的用户信息设置cookie中，返回给客户端浏览器<br>3、客户端浏览器接收到cookie请求后，会把cookie保存到本地（可能是内存，也可能是磁盘，看具体使用情况而定）<br>4、以后再次访问该web应用时，客户端浏览器就会把本地的cookie带上，这样服务器端就能根据cookie获得用户信息了</p>
<h4 id="11、什么是session，有哪些实现session的机制？"><a href="#11、什么是session，有哪些实现session的机制？" class="headerlink" title="11、什么是session，有哪些实现session的机制？"></a>11、什么是session，有哪些实现session的机制？</h4><h4 id="12、session和cookie有什么区别"><a href="#12、session和cookie有什么区别" class="headerlink" title="12、session和cookie有什么区别"></a>12、session和cookie有什么区别</h4>]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>WebRTC源码分析</title>
    <url>/2019/12/13/WebRTC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>WebRTC</category>
      </categories>
      <tags>
        <tag>WebRTC</tag>
        <tag>直播</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/12/07/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
